cmake_minimum_required(VERSION 3.16)

project(FrontEnd_Teste VERSION 0.1 LANGUAGES CXX)

set(CMAKE_AUTOUIC ON)
set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTORCC ON)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

find_package(QT NAMES Qt6 Qt5 REQUIRED COMPONENTS Widgets)
find_package(Qt${QT_VERSION_MAJOR} REQUIRED COMPONENTS Widgets)

set(PROJECT_SOURCES
        main.cpp
        mainwindow.cpp
        mainwindow.h
        mainwindow.ui
)

# Adicione o caminho para a biblioteca GMP
set(GMP_INCLUDE_DIR "C:/Users/erasm/Downloads/gmp-install/include")
set(GMP_LIBRARY_DIR "C:/Users/erasm/Downloads/gmp-install/lib")

# Inclua as diretivas de inclusão
include_directories(${GMP_INCLUDE_DIR})
link_directories(${GMP_LIBRARY_DIR})

# Adicione a biblioteca que você criou
set(LIBRARY_PATH "C:/Users/erasm/OneDrive/Documentos/dev/MD/CRIPTO RSA/backend")
set(CRIPTO_LIB "${LIBRARY_PATH}/libcripto.a")

if(${QT_VERSION_MAJOR} GREATER_EQUAL 6)
    qt_add_executable(FrontEnd_Teste
        MANUAL_FINALIZATION
        ${PROJECT_SOURCES}
        backend/CRIPTO_RSA.c
        backend/CRIPTO_RSA.h
    )
else()
    if(ANDROID)
        add_library(FrontEnd_Teste SHARED
            ${PROJECT_SOURCES}
        )
    else()
        add_executable(FrontEnd_Teste
            ${PROJECT_SOURCES}
        )
    endif()
endif()

# Link para a biblioteca cripto
target_link_libraries(FrontEnd_Teste PRIVATE Qt${QT_VERSION_MAJOR}::Widgets)

# Link para a DLL do cripto
target_link_libraries(FrontEnd_Teste PRIVATE "${CRIPTO_LIB}")

# Link para a GMP
find_library(GMP_LIB gmp HINTS ${GMP_LIBRARY_DIR})

if(GMP_LIB)
    target_link_libraries(FrontEnd_Teste PRIVATE ${GMP_LIB})
else()
    message(FATAL_ERROR "GMP library not found!")
endif()

# Qt for iOS sets MACOSX_BUNDLE_GUI_IDENTIFIER automatically since Qt 6.1.
if(${QT_VERSION} VERSION_LESS 6.1.0)
  set(BUNDLE_ID_OPTION MACOSX_BUNDLE_GUI_IDENTIFIER com.example.FrontEnd_Teste)
endif()
set_target_properties(FrontEnd_Teste PROPERTIES
    ${BUNDLE_ID_OPTION}
    MACOSX_BUNDLE_BUNDLE_VERSION ${PROJECT_VERSION}
    MACOSX_BUNDLE_SHORT_VERSION_STRING ${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}
    MACOSX_BUNDLE TRUE
    WIN32_EXECUTABLE TRUE
)

include(GNUInstallDirs)
install(TARGETS FrontEnd_Teste
    BUNDLE DESTINATION .
    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
    RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
)

if(QT_VERSION_MAJOR EQUAL 6)
    qt_finalize_executable(FrontEnd_Teste)
endif()
